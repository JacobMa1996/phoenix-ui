{
    "project": {
        "name": "phoenix-ui",
        "description": "<h3>欢迎使用基于react开发的app组件库phoenix-ui，左侧的导航栏为相关组件的名称和链接</h3><p>&nbsp;</p><h4>该组件库为app组件库，什么？你说pc版？不要急我们也有。出门左转github搜索\"eagle-ui\"</h4><p>&nbsp;</p><h4>知道你很懒，来吧传送门猛戳<a href=\"http://uedfamily.com/documents/eagle-ui/doc/\">eagle-ui</a></h4><p>&nbsp;</p><h4>您可以点击顶部导航栏的<strong><a href=\"/documents/eagle-ui/examples/\">示例</a></strong>，查看eagle-ui组件的UI效果及功能演示</h4><p>&nbsp;</p><h4>您可以通过如下方式查看组件的API</h4><ol><li><h4>在输入框中输入组件名字进行查询</h4></li><li><h4>点击左侧API导航栏</h4></li></ol><strong>说明:</strong>左侧导航栏中对应的链接名字即为组件名字<p>&nbsp;</p><h4>您可以采用如下形式在项目中应用phoenix-ui</h4><pre>import {CheckboxGroup}(根据您的需要引入组件) from 'phoenix-ui'使用相关组件</pre>或者<pre><div>&#60;script src=\"path to phoenix-ui.js\" &#62;&#60;/script&#62;的形式使用phoenix-ui</div></pre>",
        "version": "0.1.0",
        "url": "",
        "navs": [
            {
                "name": "主页",
                "url": ""
            },
            {
                "name": "例子",
                "url": "../examples/"
            }
        ]
    },
    "files": {
        "src/utils/ClassNameMixin.js": {
            "name": "src/utils/ClassNameMixin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/MethodMixin.js": {
            "name": "src/utils/MethodMixin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/PropertyMixin.js": {
            "name": "src/utils/PropertyMixin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/constants.js": {
            "name": "src/utils/constants.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/extend.js": {
            "name": "src/utils/extend.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/Badge.js": {
            "name": "src/Badge.js",
            "modules": {},
            "classes": {
                "Badge": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Button.js": {
            "name": "src/Button.js",
            "modules": {},
            "classes": {
                "Button": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ButtonGroup.js": {
            "name": "src/ButtonGroup.js",
            "modules": {},
            "classes": {
                "ButtonGroup": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Col.js": {
            "name": "src/Col.js",
            "modules": {},
            "classes": {
                "Col": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/FormGroup.js": {
            "name": "src/FormGroup.js",
            "modules": {},
            "classes": {
                "FormGroup": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Grid.js": {
            "name": "src/Grid.js",
            "modules": {
                "Grid": 1
            },
            "classes": {
                "Grid": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Input.js": {
            "name": "src/Input.js",
            "modules": {},
            "classes": {
                "Input": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Label.js": {
            "name": "src/Label.js",
            "modules": {
                "Label(标签)": 1
            },
            "classes": {
                "Label": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Row.js": {
            "name": "src/Row.js",
            "modules": {},
            "classes": {
                "Row": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Star.js": {
            "name": "src/Star.js",
            "modules": {},
            "classes": {
                "Star": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Switch.js": {
            "name": "src/Switch.js",
            "modules": {
                "Form": 1
            },
            "classes": {
                "Switch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Tab.js": {
            "name": "src/Tab.js",
            "modules": {},
            "classes": {
                "Tab": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/TableView.js": {
            "name": "src/TableView.js",
            "modules": {
                "UI": 1
            },
            "classes": {
                "TableView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Tabset.js": {
            "name": "src/Tabset.js",
            "modules": {
                "Tab(选项卡)": 1
            },
            "classes": {
                "Tabset": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Label(标签)": {
            "name": "Label(标签)",
            "submodules": {},
            "classes": {
                "Badge": 1,
                "Label": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/Label.js",
            "line": 14,
            "description": "<h5>label模块，主要包括一下两个组件:</h5>\n<strong><a href='../classes/Label.html'>label 标签</a></strong><br/>\n<strong><a href='../classes/Badge.html'>bridge 徽章</a></strong><br>\n<h6>点击以上链接或者左侧导航栏的组件名称链接进行查看</h6>",
            "itemtype": "main"
        },
        "Form": {
            "name": "Form",
            "submodules": {},
            "classes": {
                "FormGroup": 1,
                "Input": 1,
                "Switch": 1,
                "Button": 1,
                "ButtonGroup": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/Switch.js",
            "line": 5,
            "description": "开关切换，仿真ios的开关控件"
        },
        "Grid": {
            "name": "Grid",
            "submodules": {},
            "classes": {
                "Row": 1,
                "Col": 1,
                "Grid": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/Row.js",
            "line": 4,
            "description": "<h5>主要栅格化布局组件</h5>\n<pre><code>\n    &#60;Grid&#62;//定义栅格\n        &#60;Col sm={6}&#62;//定义一列，总长度为12份\n            &#60;Row&#62; &#60;/Row&#62;//定义一行\n        &#60;/Col&#62;\n    &#60;/Grid&#62;\n</code></pre>\n\n<strong><a href='../classes/Grid.html'>Grid定义外框</a></strong><br>\n<strong><a href='../classes/Row.html'>Row定义行排列</a></strong><br>\n<strong><a href='../classes/Col.html'>Col定义竖排列</a></strong><br>\n<h6>点击以上链接进行相关查看</h6>",
            "itemtype": "main"
        },
        "UI": {
            "name": "UI",
            "submodules": {
                "undefined": 1
            },
            "classes": {
                "TableView": 1,
                "Star": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/TableView.js",
            "line": 5,
            "description": "展现形式如表格一般,用来组织数据，显示链接的集合，或一系列的控件。<br />\n使用时需注意组件的子元素需要跳转功能需加上href标签并赋予正确的url，不论什么标签"
        },
        "Tab(选项卡)": {
            "name": "Tab(选项卡)",
            "submodules": {},
            "classes": {
                "Tab": 1,
                "Tabset": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/Tabset.js",
            "line": 15,
            "description": "<h5>tab选项卡，主要包括一下两个组件:</h5>\n<strong><a href='../classes/Tabset.html'>tabset</a></strong><br/>\n<strong><a href='../classes/Tab.html'>tab</a></strong><br>\n<h6>点击以上链接或者左侧导航栏的组件名称链接进行查看</h6>",
            "itemtype": "main"
        }
    },
    "classes": {
        "Badge": {
            "name": "Badge",
            "shortname": "Badge",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Label(标签)",
            "file": "src/Badge.js",
            "line": 4,
            "description": "Badge徽章标记，主要是用来提供不同颜色的标识<br/>\n可以通过phStyle来改变颜色<br/>\n因为发生回调的概率不大所以没有提供回调函数<br/>\n但支持自定义类名，事件等操作<br/>\n具体属性和接口如下：\n<ul>\n    <li>phStyle:badge徽章颜色,可取值[primary、warning、danger、info、error、success]等，默认primary</li>\n    <li>\n        <code>\n           Badge  phStyle=\"success\"\n           惠2\n           /Badge\n        </code>\n    </li>\n</ul>",
            "extends": "Component",
            "is_constructor": 1,
            "since": "0.1.0",
            "example": [
                "\timport React, { Component ,PropTypes} from 'react';\n\timport {Badge} from '../../src/index';\n\t\n\texport default class Badges extends Component{\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Badge >惠1</Badge>\n\t                <div><Badge  phStyle=\"success\">惠2</Badge></div>\n\t                <Badge  phStyle='info'>惠3</Badge>\n\t            </div>\n\t        );\n\t    }\n\t}",
                "\timport React, { Component ,PropTypes} from 'react';\n\timport {Badge} from '../../src/index';\n\t\n\texport default class Badges extends Component{\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Badge >惠1</Badge>\n\t                <div><Badge  phStyle=\"success\">惠2</Badge></div>\n\t                <Badge  phStyle='info'>惠3</Badge>\n\t            </div>\n\t        );\n\t    }\n\t}"
            ],
            "exampleTitles": [
                "展示",
                "源码"
            ],
            "show": true
        },
        "Button": {
            "name": "Button",
            "shortname": "Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Form",
            "namespace": "",
            "file": "src/Button.js",
            "line": 5,
            "description": "- 按钮组件提供所有properties中内置的颜色及字体大小样式供选择<br/>\n- 也可以自定义行内样式和className名字定义UI展示<br/>\n- 支持disabled, active, enable等属性定义<br/>\n- 可以通过phSize 设置大小，可选xs、sm、lg。<br/>\n- 通过phStyle选择按钮颜色，可选error、warning、danger、link、gray、white、success\n主要属性和接口：\n <ul>\n   <li>phSize:按钮颜色<br>\n       如：<code>\n          Button radius phSize=\"sm\" egStyle=\"warning\"\n       </code>\n   </li>\n   <li>egStyle:按钮的大小。分别为md、sm、lg，默认sm<br>\n       如：<code>\n          Button radius phSize=\"md\" phStyle=\"warning\"\n       </code>\n   </li>\n   <li>block:是否块级显示，默认false<br>\n       如：<code>\n          Button block\n       </code>\n   </li>\n </ul>",
            "extends": "Component",
            "is_constructor": 1,
            "example": [
                "\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {Button} from '../../src/index';\n\timport {ButtonGroup} from '../../src/index';\n\texport default class input extends Component{\n\t    render(){\n\t        return(\n\t            <div>\n\t                <div>\n\t                    <ButtonGroup activeCallback={function(target,html){console.log(target,html);}} phType=\"justify\" >\n\t                        <Button radius phSize=\"md\" phStyle=\"success\">水平按钮组1</Button>\n\t                        <Button radius phSize=\"md\" phStyle=\"success\">水平按钮组2</Button>\n\t                        <Button radius phSize=\"md\" phStyle=\"success\">水平按钮组3</Button>\n\t                    </ButtonGroup>\n\t                </div>\n\t                <div>\n\t                    <ButtonGroup style={{width:'100%'}} phType=\"tacked\">\n\t                        <Button block radius phSize=\"lg\" phStyle=\"primary\">垂直按钮组1</Button>\n\t                        <Button block radius phSize=\"lg\" phStyle=\"primary\">垂直按钮组2</Button>\n\t                        <Button block radius phSize=\"lg\" phStyle=\"primary\">垂直按钮组3</Button>\n\t                    </ButtonGroup>\n\t                </div>\n\t            </div>\n\t        );\n\t    }\n\t}\n\t",
                "\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {Button} from '../../src/index';\n\timport {ButtonGroup} from '../../src/index';\n\texport default class input extends Component{\n\t    render(){\n\t        return(\n\t            <div>\n\t                <div>\n\t                    <ButtonGroup activeCallback={function(target,html){console.log(target,html);}} phType=\"justify\" >\n\t                        <Button radius phSize=\"md\" phStyle=\"success\">水平按钮组1</Button>\n\t                        <Button radius phSize=\"md\" phStyle=\"success\">水平按钮组2</Button>\n\t                        <Button radius phSize=\"md\" phStyle=\"success\">水平按钮组3</Button>\n\t                    </ButtonGroup>\n\t                </div>\n\t                <div>\n\t                    <ButtonGroup style={{width:'100%'}} phType=\"tacked\">\n\t                        <Button block radius phSize=\"lg\" phStyle=\"primary\">垂直按钮组1</Button>\n\t                        <Button block radius phSize=\"lg\" phStyle=\"primary\">垂直按钮组2</Button>\n\t                        <Button block radius phSize=\"lg\" phStyle=\"primary\">垂直按钮组3</Button>\n\t                    </ButtonGroup>\n\t                </div>\n\t            </div>\n\t        );\n\t    }\n\t}\n\t"
            ],
            "exampleTitles": [
                "展示",
                "源码"
            ],
            "show": true
        },
        "ButtonGroup": {
            "name": "ButtonGroup",
            "shortname": "ButtonGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Form",
            "namespace": "",
            "file": "src/ButtonGroup.js",
            "line": 8,
            "description": "按钮组组件配合Button组件,提供了横、竖两种排列方式<br/>\n 主要属性和接口：\n<ul>\n    <li>phType:是否自适应宽度或者垂直排列，可选'justify,tacked'默认'justify'\n    </li>\n</ul>",
            "extends": "Component",
            "is_constructor": 1,
            "since": "0.1.4",
            "example": [
                "\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {Button} from '../../src/index';\n\timport {ButtonGroup} from '../../src/index';\n\texport default class input extends Component{\n\t    render(){\n\t        return(\n\t            <div>\n\t                <div>\n\t                    <ButtonGroup activeCallback={function(target,html){console.log(target,html);}} phType=\"justify\" >\n\t                        <Button radius phSize=\"md\" phStyle=\"success\">水平按钮组1</Button>\n\t                        <Button radius phSize=\"md\" phStyle=\"success\">水平按钮组2</Button>\n\t                        <Button radius phSize=\"md\" phStyle=\"success\">水平按钮组3</Button>\n\t                    </ButtonGroup>\n\t                </div>\n\t                <div>\n\t                    <ButtonGroup style={{width:'100%'}} phType=\"tacked\">\n\t                        <Button block radius phSize=\"lg\" phStyle=\"primary\">垂直按钮组1</Button>\n\t                        <Button block radius phSize=\"lg\" phStyle=\"primary\">垂直按钮组2</Button>\n\t                        <Button block radius phSize=\"lg\" phStyle=\"primary\">垂直按钮组3</Button>\n\t                    </ButtonGroup>\n\t                </div>\n\t            </div>\n\t        );\n\t    }\n\t}\n\t",
                "\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {Button} from '../../src/index';\n\timport {ButtonGroup} from '../../src/index';\n\texport default class input extends Component{\n\t    render(){\n\t        return(\n\t            <div>\n\t                <div>\n\t                    <ButtonGroup activeCallback={function(target,html){console.log(target,html);}} phType=\"justify\" >\n\t                        <Button radius phSize=\"md\" phStyle=\"success\">水平按钮组1</Button>\n\t                        <Button radius phSize=\"md\" phStyle=\"success\">水平按钮组2</Button>\n\t                        <Button radius phSize=\"md\" phStyle=\"success\">水平按钮组3</Button>\n\t                    </ButtonGroup>\n\t                </div>\n\t                <div>\n\t                    <ButtonGroup style={{width:'100%'}} phType=\"tacked\">\n\t                        <Button block radius phSize=\"lg\" phStyle=\"primary\">垂直按钮组1</Button>\n\t                        <Button block radius phSize=\"lg\" phStyle=\"primary\">垂直按钮组2</Button>\n\t                        <Button block radius phSize=\"lg\" phStyle=\"primary\">垂直按钮组3</Button>\n\t                    </ButtonGroup>\n\t                </div>\n\t            </div>\n\t        );\n\t    }\n\t}\n\t"
            ],
            "exampleTitles": [
                "展示",
                "源码"
            ],
            "show": true
        },
        "Col": {
            "name": "Col",
            "shortname": "Col",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Grid",
            "namespace": "",
            "file": "src/Col.js",
            "line": 4,
            "description": "列",
            "extends": "Component",
            "is_constructor": 1,
            "since": "0.1.0"
        },
        "FormGroup": {
            "name": "FormGroup",
            "shortname": "FormGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Form",
            "namespace": "",
            "file": "src/FormGroup.js",
            "line": 7,
            "description": "表单元素布局方式，整齐的排列一组表单元素",
            "extends": "Component",
            "is_constructor": 1,
            "example": [
                "\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {FormGroup,Row,Col,Input} from '../../src/index';\n\t\n\texport default class input extends Component{\n\t\n\t    constructor(props,context){\n\t\n\t        super(props,context);\n\t\n\t        this.state = {\n\t            name:''\n\t        };\n\t    }\n\t\n\t    setValue(key,e){\n\t        let o ={};\n\t        o[key || e.target.name] = e.target.value;\n\t        this.setState(o);\n\t    }\n\t\n\t    render(){\n\t        return(\n\t            <div style={{padding:'20px'}}>\n\t                <FormGroup>\n\t                    <Row single>\n\t                        <Col>\n\t                            <Input type=\"text\" placeholder=\"姓名\" />\n\t                        </Col>\n\t                    </Row>\n\t                    <Row single>\n\t                        <Col>\n\t                            <Input type=\"text\" placeholder=\"用户名\" />\n\t                        </Col>\n\t                    </Row>\n\t                    <Row single>\n\t                        <Col>\n\t                            <Input type=\"text\" placeholder=\"身份证\" />\n\t                        </Col>\n\t                    </Row>\n\t                    <Row>\n\t                        <Col>\n\t                            <label for=\"\">地址</label>\n\t                            <Input type=\"text\" placeholder=\"身份证\" />\n\t                        </Col>\n\t                    </Row>\n\t                    <Row className='a'>\n\t                        <Col className='test'>\n\t                            <label for=\"\">兴趣爱好</label>\n\t                            <Input type=\"checkbox\" label=\"篮球\" className='a1'/>\n\t                            <Input type=\"checkbox\" label=\"足球\" />\n\t                            <Input type=\"checkbox\" label=\"乒乓球\" />\n\t                        </Col>\n\t                    </Row>\n\t                    <Row className='test'>\n\t                        <Col>\n\t                            <a href=\"###\" className=\"navigate-right\">\n\t                                <label>性别</label>\n\t                                <input type=\"text\" placeholder=\"男/女\" disabled/>\n\t                            </a>\n\t                        </Col>\n\t                    </Row>\n\t                    <Row>\n\t                        <Col>\n\t                            <label>姓</label>\n\t                            <Input type=\"text\" placeholder=\"姓\" />\n\t                        </Col>\n\t                        <Col>\n\t                            <label>名</label>\n\t                            <Input type=\"text\" placeholder=\"名\" />\n\t                        </Col>\n\t                    </Row>\n\t\n\t                    <Row>\n\t                        <Col>\n\t                            <label><span className=\"color-error\">*</span>喜欢的运动</label>\n\t                            <div className=\"input\" style={{textAlign: 'right'}}>\n\t                                <Input type=\"checkbox\" label=\"篮球\" />\n\t                                <Input type=\"checkbox\" label=\"足球\" />\n\t                            </div>\n\t                        </Col>\n\t                    </Row>\n\t                </FormGroup>\n\t            </div>\n\t        );\n\t    }\n\t}",
                "\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {FormGroup,Row,Col,Input} from '../../src/index';\n\t\n\texport default class input extends Component{\n\t\n\t    constructor(props,context){\n\t\n\t        super(props,context);\n\t\n\t        this.state = {\n\t            name:''\n\t        };\n\t    }\n\t\n\t    setValue(key,e){\n\t        let o ={};\n\t        o[key || e.target.name] = e.target.value;\n\t        this.setState(o);\n\t    }\n\t\n\t    render(){\n\t        return(\n\t            <div style={{padding:'20px'}}>\n\t                <FormGroup>\n\t                    <Row single>\n\t                        <Col>\n\t                            <Input type=\"text\" placeholder=\"姓名\" />\n\t                        </Col>\n\t                    </Row>\n\t                    <Row single>\n\t                        <Col>\n\t                            <Input type=\"text\" placeholder=\"用户名\" />\n\t                        </Col>\n\t                    </Row>\n\t                    <Row single>\n\t                        <Col>\n\t                            <Input type=\"text\" placeholder=\"身份证\" />\n\t                        </Col>\n\t                    </Row>\n\t                    <Row>\n\t                        <Col>\n\t                            <label for=\"\">地址</label>\n\t                            <Input type=\"text\" placeholder=\"身份证\" />\n\t                        </Col>\n\t                    </Row>\n\t                    <Row className='a'>\n\t                        <Col className='test'>\n\t                            <label for=\"\">兴趣爱好</label>\n\t                            <Input type=\"checkbox\" label=\"篮球\" className='a1'/>\n\t                            <Input type=\"checkbox\" label=\"足球\" />\n\t                            <Input type=\"checkbox\" label=\"乒乓球\" />\n\t                        </Col>\n\t                    </Row>\n\t                    <Row className='test'>\n\t                        <Col>\n\t                            <a href=\"###\" className=\"navigate-right\">\n\t                                <label>性别</label>\n\t                                <input type=\"text\" placeholder=\"男/女\" disabled/>\n\t                            </a>\n\t                        </Col>\n\t                    </Row>\n\t                    <Row>\n\t                        <Col>\n\t                            <label>姓</label>\n\t                            <Input type=\"text\" placeholder=\"姓\" />\n\t                        </Col>\n\t                        <Col>\n\t                            <label>名</label>\n\t                            <Input type=\"text\" placeholder=\"名\" />\n\t                        </Col>\n\t                    </Row>\n\t\n\t                    <Row>\n\t                        <Col>\n\t                            <label><span className=\"color-error\">*</span>喜欢的运动</label>\n\t                            <div className=\"input\" style={{textAlign: 'right'}}>\n\t                                <Input type=\"checkbox\" label=\"篮球\" />\n\t                                <Input type=\"checkbox\" label=\"足球\" />\n\t                            </div>\n\t                        </Col>\n\t                    </Row>\n\t                </FormGroup>\n\t            </div>\n\t        );\n\t    }\n\t}"
            ],
            "exampleTitles": [
                "展示",
                "源码"
            ],
            "show": true
        },
        "Grid": {
            "name": "Grid",
            "shortname": "Grid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Grid",
            "namespace": "",
            "file": "src/Grid.js",
            "line": 24,
            "description": "定义栅格容器,配合Col和Row使用",
            "extends": "Component",
            "is_constructor": 1,
            "show": true
        },
        "Input": {
            "name": "Input",
            "shortname": "Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Form",
            "namespace": "",
            "file": "src/Input.js",
            "line": 5,
            "description": "表单元素，input框，使用方式跟原生一致",
            "extends": "Component",
            "is_constructor": 1,
            "example": [
                "\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {Input,Row,Col} from '../../src/index';\n\t\n\texport default class input extends Component{\n\t\n\t    constructor(props,context){\n\t\n\t        super(props,context);\n\t\n\t        this.state = {\n\t            name:''\n\t        };\n\t    }\n\t\n\t    setValue(key,e){\n\t        let o ={};\n\t        o[key || e.target.name] = e.target.value;\n\t        this.setState(o);\n\t    }\n\t\n\t    render(){\n\t        return(\n\t            <div style={{padding:'20px'}}>\n\t                <Input type=\"text\" value={this.state.name} onChange={::this.setValue.bind(this,'name')} />\n\t                <Row align=\"bottom\">\n\t                    <Col><Input type=\"radio\" label=\"男\" name=\"sex\"  /></Col>\n\t                    <Col><Input type=\"radio\" label=\"女\"  name=\"sex\" /></Col>\n\t                </Row>\n\t                <Input type=\"checkbox\" label=\"苹果\"  />\n\t            </div>\n\t        );\n\t    }\n\t}",
                "\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {Input,Row,Col} from '../../src/index';\n\t\n\texport default class input extends Component{\n\t\n\t    constructor(props,context){\n\t\n\t        super(props,context);\n\t\n\t        this.state = {\n\t            name:''\n\t        };\n\t    }\n\t\n\t    setValue(key,e){\n\t        let o ={};\n\t        o[key || e.target.name] = e.target.value;\n\t        this.setState(o);\n\t    }\n\t\n\t    render(){\n\t        return(\n\t            <div style={{padding:'20px'}}>\n\t                <Input type=\"text\" value={this.state.name} onChange={::this.setValue.bind(this,'name')} />\n\t                <Row align=\"bottom\">\n\t                    <Col><Input type=\"radio\" label=\"男\" name=\"sex\"  /></Col>\n\t                    <Col><Input type=\"radio\" label=\"女\"  name=\"sex\" /></Col>\n\t                </Row>\n\t                <Input type=\"checkbox\" label=\"苹果\"  />\n\t            </div>\n\t        );\n\t    }\n\t}"
            ],
            "exampleTitles": [
                "展示",
                "源码"
            ],
            "show": true
        },
        "Label": {
            "name": "Label",
            "shortname": "Label",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Label(标签)",
            "namespace": "",
            "file": "src/Label.js",
            "line": 14,
            "description": "Label标记，主要是用来提供不同颜色的标识<br/>\n可以通过phStyle来改变颜色,phSize改变大小<br/>\n因为发生回调的概率不大所以没有提供回调函数<br/>\n但支持自定义类名，事件等操作<br/>\n具体属性和接口如下：\n<ul>\n    <li>phStyle:label徽章颜色,可取值[primary、warning、danger、info、error、success]等，默认primary</li>\n    <li>\n        <code>\n            Label phSize=\"lg\" phStyle=\"success\"\n            惠\n           /Label\n        </code>\n    </li>\n    <li>phSize:badge徽章颜色,可取值[lg、md、'']，默认即为‘’</li>\n    <li>\n        <code>\n           Label phSize=\"lg\" phStyle=\"success\"\n            惠\n           /Label\n        </code>\n    </li>\n</ul>",
            "extends": "Component",
            "is_constructor": 1,
            "since": "0.1.0",
            "example": [
                "\timport React, { Component ,PropTypes} from 'react';\n\timport {Label} from '../../src/index';\n\t\n\texport default class Labels extends Component{\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Label >惠</Label>\n\t                <div><Label phSize=\"lg\" phStyle=\"success\">惠</Label></div>\n\t                <Label phSize=\"md\" phStyle='info'>惠</Label>\n\t            </div>\n\t        );\n\t    }\n\t}",
                "\timport React, { Component ,PropTypes} from 'react';\n\timport {Label} from '../../src/index';\n\t\n\texport default class Labels extends Component{\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Label >惠</Label>\n\t                <div><Label phSize=\"lg\" phStyle=\"success\">惠</Label></div>\n\t                <Label phSize=\"md\" phStyle='info'>惠</Label>\n\t            </div>\n\t        );\n\t    }\n\t}"
            ],
            "exampleTitles": [
                "展示",
                "源码"
            ],
            "show": true
        },
        "Row": {
            "name": "Row",
            "shortname": "Row",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Grid",
            "namespace": "",
            "file": "src/Row.js",
            "line": 4,
            "description": "行",
            "extends": "Component",
            "is_constructor": 1,
            "since": "0.1.0"
        },
        "Star": {
            "name": "Star",
            "shortname": "Star",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "src/Star.js",
            "line": 5,
            "description": "星级评价(Star)组件<br />\n提供的UI展示属性接口包括<br/>\n<ul>\n    <li>rate：星级评价的分数(满分为50)<code>默认为0</code></li>\n    <li>size：星星的大小(可选md、lg、默认3种size)<code></code></li>\n</ul><br>\n使用方式:\n<pre><code>&#60;Star rate={50} size={10}/&#62;</code>\n</pre>",
            "extends": "Component",
            "is_constructor": 1,
            "example": [
                "\t/**\n\t * Created by slashhuang on 16/5/31.\n\t */\n\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {Star} from '../../src/index';\n\t\n\texport default class StarDemo extends Component{\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Star />\n\t                <br/>\n\t                <Star Rate={5}/>\n\t                <br/>\n\t                <Star Rate={10} />\n\t                <br/>\n\t                <Star Rate={15}/>\n\t                <br/>\n\t                <Star Rate={20} size='md'/>\n\t                <br/>\n\t                <Star Rate={25} size='md'/>\n\t                <br/>\n\t                <Star Rate={30} size='md'/>\n\t                <br/>\n\t                <Star Rate={35} size='lg'/>\n\t                <br/>\n\t                <Star Rate={40} size='lg'/>\n\t                <br/>\n\t                <Star Rate={45} size='lg'/>\n\t                <br/>\n\t                <Star Rate={50} size='lg'/>\n\t            </div>\n\t        );\n\t    }\n\t}",
                "\t/**\n\t * Created by slashhuang on 16/5/31.\n\t */\n\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {Star} from '../../src/index';\n\t\n\texport default class StarDemo extends Component{\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Star />\n\t                <br/>\n\t                <Star Rate={5}/>\n\t                <br/>\n\t                <Star Rate={10} />\n\t                <br/>\n\t                <Star Rate={15}/>\n\t                <br/>\n\t                <Star Rate={20} size='md'/>\n\t                <br/>\n\t                <Star Rate={25} size='md'/>\n\t                <br/>\n\t                <Star Rate={30} size='md'/>\n\t                <br/>\n\t                <Star Rate={35} size='lg'/>\n\t                <br/>\n\t                <Star Rate={40} size='lg'/>\n\t                <br/>\n\t                <Star Rate={45} size='lg'/>\n\t                <br/>\n\t                <Star Rate={50} size='lg'/>\n\t            </div>\n\t        );\n\t    }\n\t}"
            ],
            "exampleTitles": [
                "UI展示",
                "源码"
            ],
            "show": true
        },
        "Switch": {
            "name": "Switch",
            "shortname": "Switch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Form",
            "namespace": "",
            "file": "src/Switch.js",
            "line": 5,
            "description": "开关切换，仿真ios的开关控件",
            "extends": "Component",
            "is_constructor": 1,
            "example": [
                "\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {Switch} from '../../src/index';\n\t\n\texport default class input extends Component{\n\t\n\t    constructor(props,context){\n\t\n\t        super(props,context);\n\t\n\t        this.state = {\n\t            name:''\n\t        };\n\t    }\n\t\n\t    setValue(key,e){\n\t        let o ={};\n\t        o[key || e.target.name] = e.target.value;\n\t        this.setState(o);\n\t    }\n\t\n\t    render(){\n\t        return(\n\t            <div style={{padding:'20px'}}>\n\t                <Switch />\n\t            </div>\n\t        );\n\t    }\n\t}",
                "\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {Switch} from '../../src/index';\n\t\n\texport default class input extends Component{\n\t\n\t    constructor(props,context){\n\t\n\t        super(props,context);\n\t\n\t        this.state = {\n\t            name:''\n\t        };\n\t    }\n\t\n\t    setValue(key,e){\n\t        let o ={};\n\t        o[key || e.target.name] = e.target.value;\n\t        this.setState(o);\n\t    }\n\t\n\t    render(){\n\t        return(\n\t            <div style={{padding:'20px'}}>\n\t                <Switch />\n\t            </div>\n\t        );\n\t    }\n\t}"
            ],
            "exampleTitles": [
                "展示",
                "源码"
            ],
            "show": true
        },
        "Tab": {
            "name": "Tab",
            "shortname": "Tab",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tab(选项卡)",
            "namespace": "",
            "file": "src/Tab.js",
            "line": 4,
            "description": "tab选项卡组件\n- 标签内容为heading属性，children部分为对应要显示的内容<br/>\n- 此外支持自定义类名,事件等操作<br/>\n具体属性和接口如下：\n<ul>\n    <li>heading; 标签卡的显示内容，默认‘tab’ 。\n        虽然有默认值但是这应该是必填的。</li>\n      <li>\n        例如:\n         <code>\n           Tabset activeIndex ={0} width={30}\n              Tab heading='tab1' className='测试'>hahadhdad1\n              /Tab\n           /Tabset\n         </code>\n      </li>\n      <li>clickCallback: 点击事件的回调函数，默认为null</li>\n</ul>",
            "extends": "Component",
            "is_constructor": 1,
            "since": "0.1.0",
            "example": [
                "\timport React, { Component ,PropTypes} from 'react';\n\timport {Tabset,Tab} from '../../src/index';\n\tlet Demo1 = class demo1 extends Component{\n\t    constructor(props,context){\n\t        super(props,context);\n\t        this.state={\n\t            tab2:'初始tab2内容'\n\t        }\n\t    }\n\t    test(){\n\t        this.setState({\n\t            tab2:'测试panel内容改变'\n\t        })\n\t    };\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Tabset activeIndex ={1} className = '测试name' clickCallback={()=>{console.log('测试tabset 回调')}} style={{color:'green'}}>\n\t                    <Tab heading='tab1' className='测试' clickCallback={()=>{alert('测试clickCallback属性')}}>\n\t                        hahadhdad1\n\t                    </Tab>\n\t                    <Tab heading='tab2' clickCallback={::this.test}>\n\t                        {this.state.tab2}\n\t                    </Tab>\n\t                    <Tab heading='tab3'>\n\t                        hahadhdad3\n\t                    </Tab>\n\t                </Tabset>\n\t            </div>\n\t        )\n\t    }\n\t}\n\tlet Demo2 = class demo2 extends Component{\n\t    test(){\n\t        alert('测试自定义tab点击事件');\n\t    };\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Tabset activeIndex ={0} vertical width={30}>\n\t                    <Tab heading='tab1'>\n\t                        hahadhdad1\n\t                    </Tab>\n\t                    <Tab heading='tab2' onClick={::this.test}>\n\t                        hahadhdad2\n\t                    </Tab>\n\t                    <Tab heading='tab3'>\n\t                        hahadhdad3\n\t                    </Tab>\n\t                </Tabset>\n\t            </div>\n\t        )\n\t    }\n\t}\n\texport default class input extends Component{\n\t    render(){\n\t        return(\n\t           <div>\n\t              <h1>默认横向</h1>\n\t               <Demo1 />\n\t               <h1>竖向</h1>\n\t               <Demo2 />\n\t           </div>\n\t        );\n\t    }\n\t}",
                "\timport React, { Component ,PropTypes} from 'react';\n\timport {Tabset,Tab} from '../../src/index';\n\tlet Demo1 = class demo1 extends Component{\n\t    constructor(props,context){\n\t        super(props,context);\n\t        this.state={\n\t            tab2:'初始tab2内容'\n\t        }\n\t    }\n\t    test(){\n\t        this.setState({\n\t            tab2:'测试panel内容改变'\n\t        })\n\t    };\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Tabset activeIndex ={1} className = '测试name' clickCallback={()=>{console.log('测试tabset 回调')}} style={{color:'green'}}>\n\t                    <Tab heading='tab1' className='测试' clickCallback={()=>{alert('测试clickCallback属性')}}>\n\t                        hahadhdad1\n\t                    </Tab>\n\t                    <Tab heading='tab2' clickCallback={::this.test}>\n\t                        {this.state.tab2}\n\t                    </Tab>\n\t                    <Tab heading='tab3'>\n\t                        hahadhdad3\n\t                    </Tab>\n\t                </Tabset>\n\t            </div>\n\t        )\n\t    }\n\t}\n\tlet Demo2 = class demo2 extends Component{\n\t    test(){\n\t        alert('测试自定义tab点击事件');\n\t    };\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Tabset activeIndex ={0} vertical width={30}>\n\t                    <Tab heading='tab1'>\n\t                        hahadhdad1\n\t                    </Tab>\n\t                    <Tab heading='tab2' onClick={::this.test}>\n\t                        hahadhdad2\n\t                    </Tab>\n\t                    <Tab heading='tab3'>\n\t                        hahadhdad3\n\t                    </Tab>\n\t                </Tabset>\n\t            </div>\n\t        )\n\t    }\n\t}\n\texport default class input extends Component{\n\t    render(){\n\t        return(\n\t           <div>\n\t              <h1>默认横向</h1>\n\t               <Demo1 />\n\t               <h1>竖向</h1>\n\t               <Demo2 />\n\t           </div>\n\t        );\n\t    }\n\t}"
            ],
            "exampleTitles": [
                "展示",
                "源码"
            ],
            "show": true
        },
        "TableView": {
            "name": "TableView",
            "shortname": "TableView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "src/TableView.js",
            "line": 5,
            "description": "展现形式如表格一般,用来组织数据，显示链接的集合，或一系列的控件。<br />\n使用时需注意组件的子元素需要跳转功能需加上href标签并赋予正确的url，不论什么标签",
            "extends": "Component",
            "is_constructor": 1,
            "example": [
                "\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {TableView} from '../../src/index';\n\t\n\texport default class input extends Component{\n\t\n\t    constructor(props,context){\n\t\n\t        super(props,context);\n\t\n\t        this.state = {\n\t            name:''\n\t        };\n\t    }\n\t\n\t    setValue(key,e){\n\t        let o ={};\n\t        o[key || e.target.name] = e.target.value;\n\t        this.setState(o);\n\t    }\n\t\n\t    render(){\n\t        return(\n\t            <div style={{padding:'20px'}}>\n\t                <TableView>\n\t                    <a href=\"http://www.baidu.com\">列表 1</a>\n\t                    <a>\n\t                        列表 2\n\t                        <span className=\"badge badge-primary\">2</span>\n\t                    </a>\n\t                    <a href=\"###\">\n\t                        <span className=\"badge\">5</span>\n\t                        Item 1\n\t                    </a>\n\t                    <a>\n\t                        Item 2\n\t                        <label className=\"label-switch\">\n\t                            <input id=\"js-room-selected\" type=\"checkbox\" />\n\t                                <div className=\"checkbox\"></div>\n\t                            </label>\n\t                    </a>\n\t                </TableView>\n\t            </div>\n\t        );\n\t    }\n\t}",
                "\timport React, { Component ,PropTypes} from 'react';\n\timport ReactDOM,{findDOMNode} from 'react-dom';\n\timport {TableView} from '../../src/index';\n\t\n\texport default class input extends Component{\n\t\n\t    constructor(props,context){\n\t\n\t        super(props,context);\n\t\n\t        this.state = {\n\t            name:''\n\t        };\n\t    }\n\t\n\t    setValue(key,e){\n\t        let o ={};\n\t        o[key || e.target.name] = e.target.value;\n\t        this.setState(o);\n\t    }\n\t\n\t    render(){\n\t        return(\n\t            <div style={{padding:'20px'}}>\n\t                <TableView>\n\t                    <a href=\"http://www.baidu.com\">列表 1</a>\n\t                    <a>\n\t                        列表 2\n\t                        <span className=\"badge badge-primary\">2</span>\n\t                    </a>\n\t                    <a href=\"###\">\n\t                        <span className=\"badge\">5</span>\n\t                        Item 1\n\t                    </a>\n\t                    <a>\n\t                        Item 2\n\t                        <label className=\"label-switch\">\n\t                            <input id=\"js-room-selected\" type=\"checkbox\" />\n\t                                <div className=\"checkbox\"></div>\n\t                            </label>\n\t                    </a>\n\t                </TableView>\n\t            </div>\n\t        );\n\t    }\n\t}"
            ],
            "exampleTitles": [
                "展示",
                "源码"
            ],
            "show": true
        },
        "Tabset": {
            "name": "Tabset",
            "shortname": "Tabset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tab(选项卡)",
            "namespace": "",
            "file": "src/Tabset.js",
            "line": 15,
            "description": "tabset选项卡组件\n- 可以指定当前actie选项。\n- 支持选项卡横排，竖排两种情况。\n- 此外支持自定义类名,事件等操作\n具体属性和接口如下：\n<ul>\n    <li>activeIndex; 当前选中标签卡，默认0</li>\n    <li>vertiacl; 是否竖排，如需要直接添加改属性即可，默认不竖排</li>\n    <li>width; 选项卡头部的宽度，取值0-100之间 即class＝‘col－20’，取值即可，注只有在竖排的情况下生效，\n         也就是没有vertical属性，设置width也没用的，默认20\n         例如横排情况:\n    </li>\n    <li>\n         <code>\n            Tabset activeIndex ={0} width={30}\n              Tab heading='tab1' className='测试'>hahadhdad1\n              /Tab\n           /Tabset\n         </code>\n        上面的width是不起作用的\n       竖排情况:\n         <code>\n             Tabset activeIndex ={0} vertical width={30}\n         </code>\n        此时表明默认选中第一个选项卡，并且竖排标签部分width为30%\n\n         </li>\n\n</ul>",
            "extends": "Component",
            "is_constructor": 1,
            "since": "0.1.0",
            "example": [
                "\timport React, { Component ,PropTypes} from 'react';\n\timport {Tabset,Tab} from '../../src/index';\n\tlet Demo1 = class demo1 extends Component{\n\t    constructor(props,context){\n\t        super(props,context);\n\t        this.state={\n\t            tab2:'初始tab2内容'\n\t        }\n\t    }\n\t    test(){\n\t        this.setState({\n\t            tab2:'测试panel内容改变'\n\t        })\n\t    };\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Tabset activeIndex ={1} className = '测试name' clickCallback={()=>{console.log('测试tabset 回调')}} style={{color:'green'}}>\n\t                    <Tab heading='tab1' className='测试' clickCallback={()=>{alert('测试clickCallback属性')}}>\n\t                        hahadhdad1\n\t                    </Tab>\n\t                    <Tab heading='tab2' clickCallback={::this.test}>\n\t                        {this.state.tab2}\n\t                    </Tab>\n\t                    <Tab heading='tab3'>\n\t                        hahadhdad3\n\t                    </Tab>\n\t                </Tabset>\n\t            </div>\n\t        )\n\t    }\n\t}\n\tlet Demo2 = class demo2 extends Component{\n\t    test(){\n\t        alert('测试自定义tab点击事件');\n\t    };\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Tabset activeIndex ={0} vertical width={30}>\n\t                    <Tab heading='tab1'>\n\t                        hahadhdad1\n\t                    </Tab>\n\t                    <Tab heading='tab2' onClick={::this.test}>\n\t                        hahadhdad2\n\t                    </Tab>\n\t                    <Tab heading='tab3'>\n\t                        hahadhdad3\n\t                    </Tab>\n\t                </Tabset>\n\t            </div>\n\t        )\n\t    }\n\t}\n\texport default class input extends Component{\n\t    render(){\n\t        return(\n\t           <div>\n\t              <h1>默认横向</h1>\n\t               <Demo1 />\n\t               <h1>竖向</h1>\n\t               <Demo2 />\n\t           </div>\n\t        );\n\t    }\n\t}",
                "\timport React, { Component ,PropTypes} from 'react';\n\timport {Tabset,Tab} from '../../src/index';\n\tlet Demo1 = class demo1 extends Component{\n\t    constructor(props,context){\n\t        super(props,context);\n\t        this.state={\n\t            tab2:'初始tab2内容'\n\t        }\n\t    }\n\t    test(){\n\t        this.setState({\n\t            tab2:'测试panel内容改变'\n\t        })\n\t    };\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Tabset activeIndex ={1} className = '测试name' clickCallback={()=>{console.log('测试tabset 回调')}} style={{color:'green'}}>\n\t                    <Tab heading='tab1' className='测试' clickCallback={()=>{alert('测试clickCallback属性')}}>\n\t                        hahadhdad1\n\t                    </Tab>\n\t                    <Tab heading='tab2' clickCallback={::this.test}>\n\t                        {this.state.tab2}\n\t                    </Tab>\n\t                    <Tab heading='tab3'>\n\t                        hahadhdad3\n\t                    </Tab>\n\t                </Tabset>\n\t            </div>\n\t        )\n\t    }\n\t}\n\tlet Demo2 = class demo2 extends Component{\n\t    test(){\n\t        alert('测试自定义tab点击事件');\n\t    };\n\t    render(){\n\t        return(\n\t            <div>\n\t                <Tabset activeIndex ={0} vertical width={30}>\n\t                    <Tab heading='tab1'>\n\t                        hahadhdad1\n\t                    </Tab>\n\t                    <Tab heading='tab2' onClick={::this.test}>\n\t                        hahadhdad2\n\t                    </Tab>\n\t                    <Tab heading='tab3'>\n\t                        hahadhdad3\n\t                    </Tab>\n\t                </Tabset>\n\t            </div>\n\t        )\n\t    }\n\t}\n\texport default class input extends Component{\n\t    render(){\n\t        return(\n\t           <div>\n\t              <h1>默认横向</h1>\n\t               <Demo1 />\n\t               <h1>竖向</h1>\n\t               <Demo2 />\n\t           </div>\n\t        );\n\t    }\n\t}"
            ],
            "exampleTitles": [
                "展示",
                "源码"
            ],
            "show": true
        }
    },
    "classitems": [
        {
            "file": "src/utils/ClassNameMixin.js",
            "line": 1,
            "description": "Created by mac on 15/9/7.",
            "class": "Badge"
        },
        {
            "file": "src/utils/ClassNameMixin.js",
            "line": 9,
            "description": "给className添加前缀后返回className",
            "itemtype": "method",
            "name": "getClassName",
            "params": [
                {
                    "name": "name",
                    "description": "从该字符串中去查找",
                    "type": "String"
                },
                {
                    "name": "pre",
                    "description": "是否添加Component中定义的class前缀，默认添加",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Badge"
        },
        {
            "file": "src/utils/ClassNameMixin.js",
            "line": 27,
            "description": "验证props中的样式是否符合规则",
            "itemtype": "method",
            "name": "getClassNames",
            "params": [
                {
                    "name": "props",
                    "description": "从该对象中去查找",
                    "type": "Object"
                },
                {
                    "name": "pre",
                    "description": "是否添加Component中定义的class前缀，默认添加",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Badge"
        },
        {
            "file": "src/utils/ClassNameMixin.js",
            "line": 43,
            "description": "给多个className添加前缀后返回",
            "itemtype": "method",
            "name": "getClassNamesForArguments",
            "params": [
                {
                    "name": "arguments",
                    "description": "多个class参数",
                    "type": "Arguments String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Badge"
        },
        {
            "file": "src/utils/ClassNameMixin.js",
            "line": 65,
            "description": "设置css类名前缀",
            "itemtype": "method",
            "name": "setPrefix",
            "params": [
                {
                    "name": "name",
                    "description": "class名字",
                    "type": "String"
                },
                {
                    "name": "pre",
                    "description": "是否添加前缀",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Badge"
        },
        {
            "file": "src/utils/ClassNameMixin.js",
            "line": 85,
            "description": "检查元素是否存在样式名",
            "itemtype": "method",
            "name": "hasClass",
            "params": [
                {
                    "name": "obj",
                    "description": "元素",
                    "type": "Object"
                },
                {
                    "name": "cls",
                    "description": "需要检查的样式名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Badge"
        },
        {
            "file": "src/utils/ClassNameMixin.js",
            "line": 96,
            "description": "给元素增加一个样式名",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "obj",
                    "description": "元素",
                    "type": "Object"
                },
                {
                    "name": "cls",
                    "description": "样式名",
                    "type": "String"
                }
            ],
            "class": "Badge"
        },
        {
            "file": "src/utils/ClassNameMixin.js",
            "line": 105,
            "description": "给元素删除一个样式名",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "obj",
                    "description": "元素",
                    "type": "Object"
                },
                {
                    "name": "cls",
                    "description": "样式名",
                    "type": "String"
                }
            ],
            "class": "Badge"
        },
        {
            "file": "src/utils/MethodMixin.js",
            "line": 1,
            "description": "Created by mac on 16/1/3.",
            "class": "Badge"
        },
        {
            "file": "src/utils/PropertyMixin.js",
            "line": 1,
            "description": "Created by mac on 16/1/3.",
            "class": "Badge"
        },
        {
            "file": "src/utils/constants.js",
            "line": 1,
            "description": "Created by mac on 15/9/7.",
            "class": "Badge"
        },
        {
            "file": "src/utils/constants.js",
            "line": 11,
            "description": "状态",
            "class": "Badge"
        },
        {
            "file": "src/utils/constants.js",
            "line": 62,
            "description": "颜色",
            "class": "Badge"
        },
        {
            "file": "src/utils/constants.js",
            "line": 76,
            "description": "form列表相关",
            "class": "Badge"
        },
        {
            "file": "src/utils/constants.js",
            "line": 86,
            "description": "tab",
            "class": "Badge"
        },
        {
            "file": "src/utils/extend.js",
            "line": 5,
            "description": "A recursive merge between two objects.",
            "params": [
                {
                    "name": "base",
                    "description": "- the object whose properties are to be overwritten. It\n                  should be either the root level or some nested level."
                },
                {
                    "name": "override",
                    "description": "- an object containing properties to be overwritten. It\n                  should have the same structure as the object object."
                }
            ],
            "class": "Badge"
        },
        {
            "file": "src/Badge.js",
            "line": 31,
            "description": "样式前缀",
            "itemtype": "property",
            "name": "classPrefix",
            "type": "String",
            "default": "btn",
            "class": "Badge",
            "module": "Label(标签)"
        },
        {
            "file": "src/Badge.js",
            "line": 38,
            "description": "badge徽章颜色[primary、warning、danger、info、error、success]",
            "itemtype": "property",
            "name": "phStyle",
            "type": "string",
            "default": "''",
            "class": "Badge",
            "module": "Label(标签)"
        },
        {
            "file": "src/Badge.js",
            "line": 45,
            "description": "标签tagName",
            "itemtype": "property",
            "name": "componentTag",
            "type": "String",
            "default": "a",
            "class": "Badge",
            "module": "Label(标签)"
        },
        {
            "file": "src/Button.js",
            "line": 40,
            "description": "按钮尺寸,分别为xs、sm、lg",
            "itemtype": "property",
            "name": "phSize",
            "type": "String",
            "default": "sm",
            "class": "Button",
            "module": "Form"
        },
        {
            "file": "src/Button.js",
            "line": 47,
            "description": "颜色[error、warning、danger、link、gray、white、success、'']",
            "itemtype": "property",
            "name": "phStyle",
            "type": "Boolean",
            "default": "''",
            "class": "Button",
            "module": "Form"
        },
        {
            "file": "src/Button.js",
            "line": 54,
            "description": "样式前缀",
            "itemtype": "property",
            "name": "classPrefix",
            "type": "String",
            "class": "Button",
            "module": "Form"
        },
        {
            "file": "src/Button.js",
            "line": 60,
            "description": "标签tagName",
            "itemtype": "property",
            "name": "componentTag",
            "type": "String",
            "class": "Button",
            "module": "Form"
        },
        {
            "file": "src/Button.js",
            "line": 66,
            "description": "块级显示",
            "itemtype": "property",
            "name": "block",
            "type": "Boolean",
            "default": "false",
            "class": "Button",
            "module": "Form"
        },
        {
            "file": "src/ButtonGroup.js",
            "line": 1,
            "description": "Created by mac on 15/9/8.",
            "class": "ButtonGroup",
            "module": "Form"
        },
        {
            "file": "src/ButtonGroup.js",
            "line": 27,
            "description": "是否有自适应宽度，垂直排列等属性，取值为justify(水平排列)或者tacked(垂直排列)",
            "itemtype": "property",
            "name": "phType",
            "type": "String",
            "default": "'justify'",
            "class": "ButtonGroup",
            "module": "Form"
        },
        {
            "file": "src/ButtonGroup.js",
            "line": 34,
            "description": "某个按钮被按下后的回调",
            "itemtype": "property",
            "name": "activeCallback",
            "type": "Function",
            "class": "ButtonGroup",
            "module": "Form"
        },
        {
            "file": "src/Col.js",
            "line": 15,
            "description": "占100份的多少份，目前支持5-100之间5的倍数、33（1\\3）和66(2\\3)",
            "itemtype": "property",
            "name": "width",
            "type": "Integer",
            "class": "Col",
            "module": "Grid"
        },
        {
            "file": "src/Col.js",
            "line": 21,
            "description": "偏移多少，，目前支持5-100之间5的倍数、33（1\\3）和66(2\\3)",
            "itemtype": "property",
            "name": "offset，默认不偏移",
            "type": "Integer",
            "class": "Col",
            "module": "Grid"
        },
        {
            "file": "src/Col.js",
            "line": 27,
            "description": "竖直方向的排列是靠上、居中还是靠下",
            "itemtype": "property",
            "name": "offset，默认不偏移",
            "type": "Integer",
            "class": "Col",
            "module": "Grid"
        },
        {
            "file": "src/FormGroup.js",
            "line": 20,
            "description": "样式前缀",
            "itemtype": "property",
            "name": "classPrefix",
            "type": "String",
            "class": "FormGroup",
            "module": "Form"
        },
        {
            "file": "src/FormGroup.js",
            "line": 26,
            "description": "标签tagName",
            "itemtype": "property",
            "name": "componentTag",
            "type": "String",
            "class": "FormGroup",
            "module": "Form"
        },
        {
            "file": "src/Input.js",
            "line": 18,
            "description": "样式前缀",
            "itemtype": "property",
            "name": "classPrefix",
            "type": "String",
            "class": "Input",
            "module": "Form"
        },
        {
            "file": "src/Input.js",
            "line": 24,
            "description": "标签tagName",
            "itemtype": "property",
            "name": "componentTag",
            "type": "String",
            "class": "Input",
            "module": "Form"
        },
        {
            "file": "src/Label.js",
            "line": 49,
            "description": "样式前缀",
            "itemtype": "property",
            "name": "classPrefix",
            "type": "String",
            "default": "btn",
            "class": "Label",
            "module": "Label(标签)"
        },
        {
            "file": "src/Label.js",
            "line": 56,
            "description": "label标签大小 [lg、md、'']默认为‘’即为sm不用指定",
            "itemtype": "property",
            "name": "phSize",
            "type": "string",
            "default": "''",
            "class": "Label",
            "module": "Label(标签)"
        },
        {
            "file": "src/Label.js",
            "line": 63,
            "description": "label标签颜色[primary、warning、danger、info、error、success]",
            "itemtype": "property",
            "name": "phStyle",
            "type": "string",
            "default": "'primary'",
            "class": "Label",
            "module": "Label(标签)"
        },
        {
            "file": "src/Label.js",
            "line": 70,
            "description": "标签tagName",
            "itemtype": "property",
            "name": "componentTag",
            "type": "String",
            "default": "a",
            "class": "Label",
            "module": "Label(标签)"
        },
        {
            "file": "src/Row.js",
            "line": 15,
            "description": "竖直方向的排列是靠上、居中、靠下、拉伸至父容器最大高度还是基于text的baseline对齐",
            "itemtype": "property",
            "name": "offset，默认不偏移",
            "type": "Integer",
            "class": "Row",
            "module": "Grid"
        },
        {
            "file": "src/Star.js",
            "line": 1,
            "description": "星级评价",
            "class": "Star",
            "module": "Grid"
        },
        {
            "file": "src/Star.js",
            "line": 29,
            "description": "星级评价分数",
            "itemtype": "property",
            "name": "Rate",
            "type": "number",
            "default": "默认为0，最高50",
            "class": "Star",
            "module": "UI"
        },
        {
            "file": "src/Star.js",
            "line": 36,
            "description": "星星大小",
            "itemtype": "property",
            "name": "size",
            "type": "String",
            "default": "",
            "class": "Star",
            "module": "UI"
        },
        {
            "file": "src/Switch.js",
            "line": 18,
            "description": "样式前缀",
            "itemtype": "property",
            "name": "classPrefix",
            "type": "Stringx",
            "class": "Switch",
            "module": "Form"
        },
        {
            "file": "src/Switch.js",
            "line": 24,
            "description": "标签tagName",
            "itemtype": "property",
            "name": "componentTag",
            "type": "String",
            "class": "Switch",
            "module": "Form"
        },
        {
            "file": "src/Tab.js",
            "line": 35,
            "description": "选项卡的标题文字，默认为‘tab’\n但是这个应该是必填的，一个tab显示出来也没意思啦",
            "itemtype": "property",
            "name": "heading",
            "default": "'tab'",
            "class": "Tab",
            "module": "Tab(选项卡)"
        },
        {
            "file": "src/Tab.js",
            "line": 42,
            "description": "点击事件的回调函数",
            "itemtype": "property",
            "name": "clickCallback",
            "default": "null",
            "class": "Tab",
            "module": "Tab(选项卡)"
        },
        {
            "file": "src/TableView.js",
            "line": 19,
            "description": "样式前缀",
            "itemtype": "property",
            "name": "classPrefix",
            "type": "String",
            "class": "TableView",
            "module": "UI"
        },
        {
            "file": "src/TableView.js",
            "line": 25,
            "description": "标签tagName",
            "itemtype": "property",
            "name": "componentTag",
            "type": "String",
            "class": "TableView",
            "module": "UI"
        },
        {
            "file": "src/Tabset.js",
            "line": 59,
            "description": "指定默认选中的选项卡，默认为0",
            "itemtype": "property",
            "name": "activeIndex",
            "default": "0",
            "class": "Tabset",
            "module": "Tab(选项卡)"
        },
        {
            "file": "src/Tabset.js",
            "line": 65,
            "description": "是否竖排",
            "itemtype": "property",
            "name": "vertical",
            "default": "false || null",
            "class": "Tabset",
            "module": "Tab(选项卡)"
        },
        {
            "file": "src/Tabset.js",
            "line": 71,
            "description": "设置选项卡头部的宽度，只有竖排的情况下才起作用",
            "itemtype": "property",
            "name": "width",
            "default": "'20'",
            "class": "Tabset",
            "module": "Tab(选项卡)"
        },
        {
            "file": "src/Tabset.js",
            "line": 77,
            "description": "点击事件的回调函数",
            "itemtype": "property",
            "name": "clickCallback",
            "default": "null",
            "class": "Tabset",
            "module": "Tab(选项卡)"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: demo",
            "line": " src/Badge.js:4"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Badge.js:4"
        },
        {
            "message": "unknown tag: show",
            "line": " src/Badge.js:4"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Button.js:5"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Button.js:5"
        },
        {
            "message": "unknown tag: show",
            "line": " src/Button.js:5"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/ButtonGroup.js:8"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/ButtonGroup.js:8"
        },
        {
            "message": "unknown tag: show",
            "line": " src/ButtonGroup.js:8"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/FormGroup.js:7"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/FormGroup.js:7"
        },
        {
            "message": "unknown tag: show",
            "line": " src/FormGroup.js:7"
        },
        {
            "message": "unknown tag: show",
            "line": " src/Grid.js:24"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Input.js:5"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Input.js:5"
        },
        {
            "message": "unknown tag: show",
            "line": " src/Input.js:5"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Label.js:14"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Label.js:14"
        },
        {
            "message": "unknown tag: show",
            "line": " src/Label.js:14"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Star.js:5"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Star.js:5"
        },
        {
            "message": "unknown tag: show",
            "line": " src/Star.js:5"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Switch.js:5"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Switch.js:5"
        },
        {
            "message": "unknown tag: show",
            "line": " src/Switch.js:5"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Tab.js:4"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Tab.js:4"
        },
        {
            "message": "unknown tag: show",
            "line": " src/Tab.js:4"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/TableView.js:5"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/TableView.js:5"
        },
        {
            "message": "unknown tag: show",
            "line": " src/TableView.js:5"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Tabset.js:15"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/Tabset.js:15"
        },
        {
            "message": "unknown tag: show",
            "line": " src/Tabset.js:15"
        },
        {
            "message": "Missing item type\nCreated by mac on 15/9/7.",
            "line": " src/utils/ClassNameMixin.js:1"
        },
        {
            "message": "Missing item type\nCreated by mac on 16/1/3.",
            "line": " src/utils/MethodMixin.js:1"
        },
        {
            "message": "Missing item type\nCreated by mac on 16/1/3.",
            "line": " src/utils/PropertyMixin.js:1"
        },
        {
            "message": "Missing item type\nCreated by mac on 15/9/7.",
            "line": " src/utils/constants.js:1"
        },
        {
            "message": "Missing item type\n状态",
            "line": " src/utils/constants.js:11"
        },
        {
            "message": "Missing item type\n颜色",
            "line": " src/utils/constants.js:62"
        },
        {
            "message": "Missing item type\nform列表相关",
            "line": " src/utils/constants.js:76"
        },
        {
            "message": "Missing item type\ntab",
            "line": " src/utils/constants.js:86"
        },
        {
            "message": "Missing item type\nA recursive merge between two objects.",
            "line": " src/utils/extend.js:5"
        },
        {
            "message": "Missing item type\nCreated by mac on 15/9/8.",
            "line": " src/ButtonGroup.js:1"
        },
        {
            "message": "Missing item type\n星级评价",
            "line": " src/Star.js:1"
        }
    ]
}